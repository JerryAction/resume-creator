{"ast":null,"code":"// 简化版个人信息数据模型\n\n// 模拟数据存储\nlet profiles = [{\n  id: '1',\n  name: '张三',\n  title: '高级前端工程师',\n  email: 'zhangsan@example.com',\n  phone: '+86 138 0013 8000',\n  address: '北京市朝阳区',\n  bio: '5年前端开发经验，专注于React和Vue.js生态系统。热爱技术分享，有丰富的团队协作经验。',\n  github: 'https://github.com/zhangsan',\n  linkedin: 'https://linkedin.com/in/zhangsan',\n  website: 'https://zhangsan.dev',\n  avatar_url: '',\n  created_date: '2023-01-01',\n  updated_date: '2023-01-01'\n}];\nclass Profile {\n  // 获取个人信息列表\n  static async list(orderBy = '-created_date') {\n    // 模拟异步操作\n    return new Promise(resolve => {\n      setTimeout(() => {\n        // 简单排序实现\n        if (orderBy === '-created_date') {\n          resolve([...profiles].sort((a, b) => new Date(b.created_date) - new Date(a.created_date)));\n        } else {\n          resolve(profiles);\n        }\n      }, 100);\n    });\n  }\n\n  // 创建新的个人信息\n  static async create(data) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const newProfile = {\n          id: String(profiles.length + 1),\n          ...data,\n          created_date: new Date().toISOString().split('T')[0],\n          updated_date: new Date().toISOString().split('T')[0]\n        };\n        profiles.push(newProfile);\n        resolve(newProfile);\n      }, 100);\n    });\n  }\n\n  // 更新个人信息\n  static async update(id, data) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const index = profiles.findIndex(p => p.id === id);\n        if (index === -1) {\n          reject(new Error('个人信息未找到'));\n          return;\n        }\n        profiles[index] = {\n          ...profiles[index],\n          ...data,\n          updated_date: new Date().toISOString().split('T')[0]\n        };\n        resolve(profiles[index]);\n      }, 100);\n    });\n  }\n}\nexport default Profile;","map":{"version":3,"names":["profiles","id","name","title","email","phone","address","bio","github","linkedin","website","avatar_url","created_date","updated_date","Profile","list","orderBy","Promise","resolve","setTimeout","sort","a","b","Date","create","data","newProfile","String","length","toISOString","split","push","update","reject","index","findIndex","p","Error"],"sources":["/Users/lt/ai trae/person/src/entities/profile.js"],"sourcesContent":["// 简化版个人信息数据模型\n\n// 模拟数据存储\nlet profiles = [\n  {\n    id: '1',\n    name: '张三',\n    title: '高级前端工程师',\n    email: 'zhangsan@example.com',\n    phone: '+86 138 0013 8000',\n    address: '北京市朝阳区',\n    bio: '5年前端开发经验，专注于React和Vue.js生态系统。热爱技术分享，有丰富的团队协作经验。',\n    github: 'https://github.com/zhangsan',\n    linkedin: 'https://linkedin.com/in/zhangsan',\n    website: 'https://zhangsan.dev',\n    avatar_url: '',\n    created_date: '2023-01-01',\n    updated_date: '2023-01-01'\n  }\n];\n\nclass Profile {\n  // 获取个人信息列表\n  static async list(orderBy = '-created_date') {\n    // 模拟异步操作\n    return new Promise(resolve => {\n      setTimeout(() => {\n        // 简单排序实现\n        if (orderBy === '-created_date') {\n          resolve([...profiles].sort((a, b) => new Date(b.created_date) - new Date(a.created_date)));\n        } else {\n          resolve(profiles);\n        }\n      }, 100);\n    });\n  }\n\n  // 创建新的个人信息\n  static async create(data) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const newProfile = {\n          id: String(profiles.length + 1),\n          ...data,\n          created_date: new Date().toISOString().split('T')[0],\n          updated_date: new Date().toISOString().split('T')[0]\n        };\n        profiles.push(newProfile);\n        resolve(newProfile);\n      }, 100);\n    });\n  }\n\n  // 更新个人信息\n  static async update(id, data) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const index = profiles.findIndex(p => p.id === id);\n        if (index === -1) {\n          reject(new Error('个人信息未找到'));\n          return;\n        }\n        \n        profiles[index] = {\n          ...profiles[index],\n          ...data,\n          updated_date: new Date().toISOString().split('T')[0]\n        };\n        resolve(profiles[index]);\n      }, 100);\n    });\n  }\n}\n\nexport default Profile;"],"mappings":"AAAA;;AAEA;AACA,IAAIA,QAAQ,GAAG,CACb;EACEC,EAAE,EAAE,GAAG;EACPC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,SAAS;EAChBC,KAAK,EAAE,sBAAsB;EAC7BC,KAAK,EAAE,mBAAmB;EAC1BC,OAAO,EAAE,QAAQ;EACjBC,GAAG,EAAE,iDAAiD;EACtDC,MAAM,EAAE,6BAA6B;EACrCC,QAAQ,EAAE,kCAAkC;EAC5CC,OAAO,EAAE,sBAAsB;EAC/BC,UAAU,EAAE,EAAE;EACdC,YAAY,EAAE,YAAY;EAC1BC,YAAY,EAAE;AAChB,CAAC,CACF;AAED,MAAMC,OAAO,CAAC;EACZ;EACA,aAAaC,IAAIA,CAACC,OAAO,GAAG,eAAe,EAAE;IAC3C;IACA,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAI;MAC5BC,UAAU,CAAC,MAAM;QACf;QACA,IAAIH,OAAO,KAAK,eAAe,EAAE;UAC/BE,OAAO,CAAC,CAAC,GAAGlB,QAAQ,CAAC,CAACoB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACD,CAAC,CAACV,YAAY,CAAC,GAAG,IAAIW,IAAI,CAACF,CAAC,CAACT,YAAY,CAAC,CAAC,CAAC;QAC5F,CAAC,MAAM;UACLM,OAAO,CAAClB,QAAQ,CAAC;QACnB;MACF,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ;;EAEA;EACA,aAAawB,MAAMA,CAACC,IAAI,EAAE;IACxB,OAAO,IAAIR,OAAO,CAACC,OAAO,IAAI;MAC5BC,UAAU,CAAC,MAAM;QACf,MAAMO,UAAU,GAAG;UACjBzB,EAAE,EAAE0B,MAAM,CAAC3B,QAAQ,CAAC4B,MAAM,GAAG,CAAC,CAAC;UAC/B,GAAGH,IAAI;UACPb,YAAY,EAAE,IAAIW,IAAI,CAAC,CAAC,CAACM,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UACpDjB,YAAY,EAAE,IAAIU,IAAI,CAAC,CAAC,CAACM,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QACrD,CAAC;QACD9B,QAAQ,CAAC+B,IAAI,CAACL,UAAU,CAAC;QACzBR,OAAO,CAACQ,UAAU,CAAC;MACrB,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ;;EAEA;EACA,aAAaM,MAAMA,CAAC/B,EAAE,EAAEwB,IAAI,EAAE;IAC5B,OAAO,IAAIR,OAAO,CAAC,CAACC,OAAO,EAAEe,MAAM,KAAK;MACtCd,UAAU,CAAC,MAAM;QACf,MAAMe,KAAK,GAAGlC,QAAQ,CAACmC,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACnC,EAAE,KAAKA,EAAE,CAAC;QAClD,IAAIiC,KAAK,KAAK,CAAC,CAAC,EAAE;UAChBD,MAAM,CAAC,IAAII,KAAK,CAAC,SAAS,CAAC,CAAC;UAC5B;QACF;QAEArC,QAAQ,CAACkC,KAAK,CAAC,GAAG;UAChB,GAAGlC,QAAQ,CAACkC,KAAK,CAAC;UAClB,GAAGT,IAAI;UACPZ,YAAY,EAAE,IAAIU,IAAI,CAAC,CAAC,CAACM,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QACrD,CAAC;QACDZ,OAAO,CAAClB,QAAQ,CAACkC,KAAK,CAAC,CAAC;MAC1B,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ;AACF;AAEA,eAAepB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}