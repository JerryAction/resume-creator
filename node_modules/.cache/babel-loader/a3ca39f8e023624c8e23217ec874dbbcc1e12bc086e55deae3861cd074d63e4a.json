{"ast":null,"code":"const education = [{\n  id: 1,\n  school: '北京大学',\n  degree: '计算机科学与技术',\n  major: '计算机科学与技术',\n  start_date: '2016-09-01',\n  end_date: '2020-06-30',\n  gpa: '3.8/4.0',\n  description: '主修计算机科学与技术，学习了数据结构、算法、操作系统、数据库等核心课程。'\n}, {\n  id: 2,\n  school: '清华大学',\n  degree: '软件工程',\n  major: '软件工程',\n  start_date: '2020-09-01',\n  end_date: '2022-06-30',\n  gpa: '3.9/4.0',\n  description: '研究生阶段专注于软件工程领域，研究前端性能优化和用户体验设计。'\n}];\nclass Education {\n  static async list(orderBy = '-start_date') {\n    // 模拟异步操作\n    return new Promise(resolve => {\n      setTimeout(() => {\n        // 简单排序实现\n        const sorted = [...education].sort((a, b) => {\n          if (orderBy === '-start_date') {\n            return new Date(b.start_date) - new Date(a.start_date);\n          }\n          return 0;\n        });\n        resolve(sorted);\n      }, 100);\n    });\n  }\n  static async create(data) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const newEducation = {\n          ...data,\n          id: education.length + 1\n        };\n        education.push(newEducation);\n        resolve(newEducation);\n      }, 100);\n    });\n  }\n  static async update(id, data) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const index = education.findIndex(e => e.id === id);\n        if (index !== -1) {\n          education[index] = {\n            ...education[index],\n            ...data\n          };\n          resolve(education[index]);\n        } else {\n          throw new Error('Education not found');\n        }\n      }, 100);\n    });\n  }\n}\nexport default Education;","map":{"version":3,"names":["education","id","school","degree","major","start_date","end_date","gpa","description","Education","list","orderBy","Promise","resolve","setTimeout","sorted","sort","a","b","Date","create","data","newEducation","length","push","update","index","findIndex","e","Error"],"sources":["/Users/lt/ai trae/person/src/entities/education.js"],"sourcesContent":["const education = [\n  {\n    id: 1,\n    school: '北京大学',\n    degree: '计算机科学与技术',\n    major: '计算机科学与技术',\n    start_date: '2016-09-01',\n    end_date: '2020-06-30',\n    gpa: '3.8/4.0',\n    description: '主修计算机科学与技术，学习了数据结构、算法、操作系统、数据库等核心课程。'\n  },\n  {\n    id: 2,\n    school: '清华大学',\n    degree: '软件工程',\n    major: '软件工程',\n    start_date: '2020-09-01',\n    end_date: '2022-06-30',\n    gpa: '3.9/4.0',\n    description: '研究生阶段专注于软件工程领域，研究前端性能优化和用户体验设计。'\n  }\n];\n\nclass Education {\n  static async list(orderBy = '-start_date') {\n    // 模拟异步操作\n    return new Promise(resolve => {\n      setTimeout(() => {\n        // 简单排序实现\n        const sorted = [...education].sort((a, b) => {\n          if (orderBy === '-start_date') {\n            return new Date(b.start_date) - new Date(a.start_date);\n          }\n          return 0;\n        });\n        resolve(sorted);\n      }, 100);\n    });\n  }\n\n  static async create(data) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const newEducation = {\n          ...data,\n          id: education.length + 1\n        };\n        education.push(newEducation);\n        resolve(newEducation);\n      }, 100);\n    });\n  }\n\n  static async update(id, data) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const index = education.findIndex(e => e.id === id);\n        if (index !== -1) {\n          education[index] = { ...education[index], ...data };\n          resolve(education[index]);\n        } else {\n          throw new Error('Education not found');\n        }\n      }, 100);\n    });\n  }\n}\n\nexport default Education;"],"mappings":"AAAA,MAAMA,SAAS,GAAG,CAChB;EACEC,EAAE,EAAE,CAAC;EACLC,MAAM,EAAE,MAAM;EACdC,MAAM,EAAE,UAAU;EAClBC,KAAK,EAAE,UAAU;EACjBC,UAAU,EAAE,YAAY;EACxBC,QAAQ,EAAE,YAAY;EACtBC,GAAG,EAAE,SAAS;EACdC,WAAW,EAAE;AACf,CAAC,EACD;EACEP,EAAE,EAAE,CAAC;EACLC,MAAM,EAAE,MAAM;EACdC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE,MAAM;EACbC,UAAU,EAAE,YAAY;EACxBC,QAAQ,EAAE,YAAY;EACtBC,GAAG,EAAE,SAAS;EACdC,WAAW,EAAE;AACf,CAAC,CACF;AAED,MAAMC,SAAS,CAAC;EACd,aAAaC,IAAIA,CAACC,OAAO,GAAG,aAAa,EAAE;IACzC;IACA,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAI;MAC5BC,UAAU,CAAC,MAAM;QACf;QACA,MAAMC,MAAM,GAAG,CAAC,GAAGf,SAAS,CAAC,CAACgB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UAC3C,IAAIP,OAAO,KAAK,aAAa,EAAE;YAC7B,OAAO,IAAIQ,IAAI,CAACD,CAAC,CAACb,UAAU,CAAC,GAAG,IAAIc,IAAI,CAACF,CAAC,CAACZ,UAAU,CAAC;UACxD;UACA,OAAO,CAAC;QACV,CAAC,CAAC;QACFQ,OAAO,CAACE,MAAM,CAAC;MACjB,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ;EAEA,aAAaK,MAAMA,CAACC,IAAI,EAAE;IACxB,OAAO,IAAIT,OAAO,CAACC,OAAO,IAAI;MAC5BC,UAAU,CAAC,MAAM;QACf,MAAMQ,YAAY,GAAG;UACnB,GAAGD,IAAI;UACPpB,EAAE,EAAED,SAAS,CAACuB,MAAM,GAAG;QACzB,CAAC;QACDvB,SAAS,CAACwB,IAAI,CAACF,YAAY,CAAC;QAC5BT,OAAO,CAACS,YAAY,CAAC;MACvB,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ;EAEA,aAAaG,MAAMA,CAACxB,EAAE,EAAEoB,IAAI,EAAE;IAC5B,OAAO,IAAIT,OAAO,CAACC,OAAO,IAAI;MAC5BC,UAAU,CAAC,MAAM;QACf,MAAMY,KAAK,GAAG1B,SAAS,CAAC2B,SAAS,CAACC,CAAC,IAAIA,CAAC,CAAC3B,EAAE,KAAKA,EAAE,CAAC;QACnD,IAAIyB,KAAK,KAAK,CAAC,CAAC,EAAE;UAChB1B,SAAS,CAAC0B,KAAK,CAAC,GAAG;YAAE,GAAG1B,SAAS,CAAC0B,KAAK,CAAC;YAAE,GAAGL;UAAK,CAAC;UACnDR,OAAO,CAACb,SAAS,CAAC0B,KAAK,CAAC,CAAC;QAC3B,CAAC,MAAM;UACL,MAAM,IAAIG,KAAK,CAAC,qBAAqB,CAAC;QACxC;MACF,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ;AACF;AAEA,eAAepB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}