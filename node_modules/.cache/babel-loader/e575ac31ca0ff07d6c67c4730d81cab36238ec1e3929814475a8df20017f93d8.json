{"ast":null,"code":"// 简化版工作经历数据模型\n\n// 模拟数据存储\nlet experiences = [{\n  id: '1',\n  company: '科技有限公司',\n  position: '高级前端工程师',\n  start_date: '2020-03-01',\n  end_date: '2023-12-31',\n  is_current: false,\n  description: '负责公司核心产品的前端开发工作，使用React技术栈构建高性能的用户界面。',\n  achievements: ['优化了核心页面的加载速度，性能提升了40%', '重构了状态管理系统，提高了代码的可维护性', '带领3人前端团队完成多个重要项目'],\n  location: '北京'\n}, {\n  id: '2',\n  company: '互联网公司',\n  position: '前端工程师',\n  start_date: '2018-07-01',\n  end_date: '2020-02-28',\n  is_current: false,\n  description: '参与公司多个产品的前端开发，使用Vue.js技术栈。',\n  achievements: ['开发了公司官网，提升了公司品牌形象', '实现了响应式设计，适配多种设备', '优化了SEO，提高了网站搜索排名'],\n  location: '上海'\n}];\nclass Experience {\n  // 获取工作经历列表\n  static async list(orderBy = '-start_date') {\n    // 模拟异步操作\n    return new Promise(resolve => {\n      setTimeout(() => {\n        // 简单排序实现\n        if (orderBy === '-start_date') {\n          resolve([...experiences].sort((a, b) => new Date(b.start_date) - new Date(a.start_date)));\n        } else {\n          resolve(experiences);\n        }\n      }, 100);\n    });\n  }\n\n  // 创建新的工作经历\n  static async create(data) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const newExperience = {\n          id: String(experiences.length + 1),\n          ...data\n        };\n        experiences.push(newExperience);\n        resolve(newExperience);\n      }, 100);\n    });\n  }\n\n  // 更新工作经历\n  static async update(id, data) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const index = experiences.findIndex(e => e.id === id);\n        if (index === -1) {\n          reject(new Error('工作经历未找到'));\n          return;\n        }\n        experiences[index] = {\n          ...experiences[index],\n          ...data\n        };\n        resolve(experiences[index]);\n      }, 100);\n    });\n  }\n}\nexport default Experience;","map":{"version":3,"names":["experiences","id","company","position","start_date","end_date","is_current","description","achievements","location","Experience","list","orderBy","Promise","resolve","setTimeout","sort","a","b","Date","create","data","newExperience","String","length","push","update","reject","index","findIndex","e","Error"],"sources":["/Users/lt/ai trae/person/src/entities/experience.js"],"sourcesContent":["// 简化版工作经历数据模型\n\n// 模拟数据存储\nlet experiences = [\n  {\n    id: '1',\n    company: '科技有限公司',\n    position: '高级前端工程师',\n    start_date: '2020-03-01',\n    end_date: '2023-12-31',\n    is_current: false,\n    description: '负责公司核心产品的前端开发工作，使用React技术栈构建高性能的用户界面。',\n    achievements: [\n      '优化了核心页面的加载速度，性能提升了40%',\n      '重构了状态管理系统，提高了代码的可维护性',\n      '带领3人前端团队完成多个重要项目'\n    ],\n    location: '北京'\n  },\n  {\n    id: '2',\n    company: '互联网公司',\n    position: '前端工程师',\n    start_date: '2018-07-01',\n    end_date: '2020-02-28',\n    is_current: false,\n    description: '参与公司多个产品的前端开发，使用Vue.js技术栈。',\n    achievements: [\n      '开发了公司官网，提升了公司品牌形象',\n      '实现了响应式设计，适配多种设备',\n      '优化了SEO，提高了网站搜索排名'\n    ],\n    location: '上海'\n  }\n];\n\nclass Experience {\n  // 获取工作经历列表\n  static async list(orderBy = '-start_date') {\n    // 模拟异步操作\n    return new Promise(resolve => {\n      setTimeout(() => {\n        // 简单排序实现\n        if (orderBy === '-start_date') {\n          resolve([...experiences].sort((a, b) => new Date(b.start_date) - new Date(a.start_date)));\n        } else {\n          resolve(experiences);\n        }\n      }, 100);\n    });\n  }\n\n  // 创建新的工作经历\n  static async create(data) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const newExperience = {\n          id: String(experiences.length + 1),\n          ...data\n        };\n        experiences.push(newExperience);\n        resolve(newExperience);\n      }, 100);\n    });\n  }\n\n  // 更新工作经历\n  static async update(id, data) {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        const index = experiences.findIndex(e => e.id === id);\n        if (index === -1) {\n          reject(new Error('工作经历未找到'));\n          return;\n        }\n        \n        experiences[index] = { ...experiences[index], ...data };\n        resolve(experiences[index]);\n      }, 100);\n    });\n  }\n}\n\nexport default Experience;"],"mappings":"AAAA;;AAEA;AACA,IAAIA,WAAW,GAAG,CAChB;EACEC,EAAE,EAAE,GAAG;EACPC,OAAO,EAAE,QAAQ;EACjBC,QAAQ,EAAE,SAAS;EACnBC,UAAU,EAAE,YAAY;EACxBC,QAAQ,EAAE,YAAY;EACtBC,UAAU,EAAE,KAAK;EACjBC,WAAW,EAAE,uCAAuC;EACpDC,YAAY,EAAE,CACZ,uBAAuB,EACvB,sBAAsB,EACtB,kBAAkB,CACnB;EACDC,QAAQ,EAAE;AACZ,CAAC,EACD;EACER,EAAE,EAAE,GAAG;EACPC,OAAO,EAAE,OAAO;EAChBC,QAAQ,EAAE,OAAO;EACjBC,UAAU,EAAE,YAAY;EACxBC,QAAQ,EAAE,YAAY;EACtBC,UAAU,EAAE,KAAK;EACjBC,WAAW,EAAE,4BAA4B;EACzCC,YAAY,EAAE,CACZ,mBAAmB,EACnB,iBAAiB,EACjB,kBAAkB,CACnB;EACDC,QAAQ,EAAE;AACZ,CAAC,CACF;AAED,MAAMC,UAAU,CAAC;EACf;EACA,aAAaC,IAAIA,CAACC,OAAO,GAAG,aAAa,EAAE;IACzC;IACA,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAI;MAC5BC,UAAU,CAAC,MAAM;QACf;QACA,IAAIH,OAAO,KAAK,aAAa,EAAE;UAC7BE,OAAO,CAAC,CAAC,GAAGd,WAAW,CAAC,CAACgB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACD,CAAC,CAACd,UAAU,CAAC,GAAG,IAAIe,IAAI,CAACF,CAAC,CAACb,UAAU,CAAC,CAAC,CAAC;QAC3F,CAAC,MAAM;UACLU,OAAO,CAACd,WAAW,CAAC;QACtB;MACF,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ;;EAEA;EACA,aAAaoB,MAAMA,CAACC,IAAI,EAAE;IACxB,OAAO,IAAIR,OAAO,CAACC,OAAO,IAAI;MAC5BC,UAAU,CAAC,MAAM;QACf,MAAMO,aAAa,GAAG;UACpBrB,EAAE,EAAEsB,MAAM,CAACvB,WAAW,CAACwB,MAAM,GAAG,CAAC,CAAC;UAClC,GAAGH;QACL,CAAC;QACDrB,WAAW,CAACyB,IAAI,CAACH,aAAa,CAAC;QAC/BR,OAAO,CAACQ,aAAa,CAAC;MACxB,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ;;EAEA;EACA,aAAaI,MAAMA,CAACzB,EAAE,EAAEoB,IAAI,EAAE;IAC5B,OAAO,IAAIR,OAAO,CAAC,CAACC,OAAO,EAAEa,MAAM,KAAK;MACtCZ,UAAU,CAAC,MAAM;QACf,MAAMa,KAAK,GAAG5B,WAAW,CAAC6B,SAAS,CAACC,CAAC,IAAIA,CAAC,CAAC7B,EAAE,KAAKA,EAAE,CAAC;QACrD,IAAI2B,KAAK,KAAK,CAAC,CAAC,EAAE;UAChBD,MAAM,CAAC,IAAII,KAAK,CAAC,SAAS,CAAC,CAAC;UAC5B;QACF;QAEA/B,WAAW,CAAC4B,KAAK,CAAC,GAAG;UAAE,GAAG5B,WAAW,CAAC4B,KAAK,CAAC;UAAE,GAAGP;QAAK,CAAC;QACvDP,OAAO,CAACd,WAAW,CAAC4B,KAAK,CAAC,CAAC;MAC7B,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ;AACF;AAEA,eAAelB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}