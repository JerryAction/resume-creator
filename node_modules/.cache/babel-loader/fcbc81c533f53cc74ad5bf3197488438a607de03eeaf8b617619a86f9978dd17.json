{"ast":null,"code":"// Removed incomplete array declaration\nconst experiencesData = [{\n  id: 1,\n  company: 'ABC科技有限公司',\n  position: '高级前端工程师',\n  start_date: '2022-01-01',\n  end_date: '2024-01-01',\n  is_current: false,\n  description: '负责公司核心产品的前端开发工作，使用React技术栈构建高性能的用户界面。',\n  achievements: ['优化前端性能，页面加载速度提升40%', '重构核心组件库，提高代码复用率和维护性', '带领3人前端团队完成多个重要项目'],\n  location: '北京'\n}, {\n  id: 2,\n  company: 'XYZ互联网公司',\n  position: '前端工程师',\n  start_date: '2020-01-01',\n  end_date: '2021-12-31',\n  is_current: false,\n  description: '参与公司多个项目的前端开发工作，使用Vue.js技术栈。',\n  achievements: ['开发并维护公司官网和产品展示页面', '优化移动端用户体验，提高用户留存率20%', '与设计团队紧密合作，实现高质量的UI效果'],\n  location: '上海'\n}];\nclass Experience {\n  static async list(orderBy = '-start_date') {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const sorted = [...experiencesData].sort((a, b) => {\n          if (orderBy === '-start_date') {\n            return new Date(b.start_date) - new Date(a.start_date);\n          }\n          return 0;\n        });\n        resolve(sorted);\n      }, 100);\n    });\n  }\n  static async create(data) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const newExperience = {\n          ...data,\n          id: experiencesData.length + 1\n        };\n        experiencesData.push(newExperience);\n        resolve(newExperience);\n      }, 100);\n    });\n  }\n  static async update(id, data) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const index = experiencesData.findIndex(e => e.id === id);\n        if (index !== -1) {\n          experiencesData[index] = {\n            ...experiencesData[index],\n            ...data\n          };\n          resolve(experiencesData[index]);\n        } else {\n          throw new Error('Experience not found');\n        }\n      }, 100);\n    });\n  }\n}\nexport default Experience;","map":{"version":3,"names":["experiencesData","id","company","position","start_date","end_date","is_current","description","achievements","location","Experience","list","orderBy","Promise","resolve","setTimeout","sorted","sort","a","b","Date","create","data","newExperience","length","push","update","index","findIndex","e","Error"],"sources":["/Users/lt/ai trae/person/src/entities/experience.js"],"sourcesContent":["// Removed incomplete array declaration\nconst experiencesData = [\n  {\n    id: 1,\n    company: 'ABC科技有限公司',\n    position: '高级前端工程师',\n    start_date: '2022-01-01',\n    end_date: '2024-01-01',\n    is_current: false,\n    description: '负责公司核心产品的前端开发工作，使用React技术栈构建高性能的用户界面。',\n    achievements: [\n      '优化前端性能，页面加载速度提升40%',\n      '重构核心组件库，提高代码复用率和维护性',\n      '带领3人前端团队完成多个重要项目'\n    ],\n    location: '北京'\n  },\n  {\n    id: 2,\n    company: 'XYZ互联网公司',\n    position: '前端工程师',\n    start_date: '2020-01-01',\n    end_date: '2021-12-31',\n    is_current: false,\n    description: '参与公司多个项目的前端开发工作，使用Vue.js技术栈。',\n    achievements: [\n      '开发并维护公司官网和产品展示页面',\n      '优化移动端用户体验，提高用户留存率20%',\n      '与设计团队紧密合作，实现高质量的UI效果'\n    ],\n    location: '上海'\n  }\n];\n\nclass Experience {\n  \n\n  static async list(orderBy = '-start_date') {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const sorted = [...experiencesData].sort((a, b) => {\n          if (orderBy === '-start_date') {\n            return new Date(b.start_date) - new Date(a.start_date);\n          }\n          return 0;\n        });\n        resolve(sorted);\n      }, 100);\n    });\n  }\n\n  static async create(data) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const newExperience = {\n          ...data,\n          id: experiencesData.length + 1\n        };\n        experiencesData.push(newExperience);\n        resolve(newExperience);\n      }, 100);\n    });\n  }\n\n  static async update(id, data) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const index = experiencesData.findIndex(e => e.id === id);\n        if (index !== -1) {\n          experiencesData[index] = { ...experiencesData[index], ...data };\n          resolve(experiencesData[index]);\n        } else {\n          throw new Error('Experience not found');\n        }\n      }, 100);\n    });\n  }\n}\n\nexport default Experience;"],"mappings":"AAAA;AACA,MAAMA,eAAe,GAAG,CACtB;EACEC,EAAE,EAAE,CAAC;EACLC,OAAO,EAAE,WAAW;EACpBC,QAAQ,EAAE,SAAS;EACnBC,UAAU,EAAE,YAAY;EACxBC,QAAQ,EAAE,YAAY;EACtBC,UAAU,EAAE,KAAK;EACjBC,WAAW,EAAE,uCAAuC;EACpDC,YAAY,EAAE,CACZ,oBAAoB,EACpB,qBAAqB,EACrB,kBAAkB,CACnB;EACDC,QAAQ,EAAE;AACZ,CAAC,EACD;EACER,EAAE,EAAE,CAAC;EACLC,OAAO,EAAE,UAAU;EACnBC,QAAQ,EAAE,OAAO;EACjBC,UAAU,EAAE,YAAY;EACxBC,QAAQ,EAAE,YAAY;EACtBC,UAAU,EAAE,KAAK;EACjBC,WAAW,EAAE,8BAA8B;EAC3CC,YAAY,EAAE,CACZ,kBAAkB,EAClB,sBAAsB,EACtB,sBAAsB,CACvB;EACDC,QAAQ,EAAE;AACZ,CAAC,CACF;AAED,MAAMC,UAAU,CAAC;EAGf,aAAaC,IAAIA,CAACC,OAAO,GAAG,aAAa,EAAE;IACzC,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAI;MAC5BC,UAAU,CAAC,MAAM;QACf,MAAMC,MAAM,GAAG,CAAC,GAAGhB,eAAe,CAAC,CAACiB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UACjD,IAAIP,OAAO,KAAK,aAAa,EAAE;YAC7B,OAAO,IAAIQ,IAAI,CAACD,CAAC,CAACf,UAAU,CAAC,GAAG,IAAIgB,IAAI,CAACF,CAAC,CAACd,UAAU,CAAC;UACxD;UACA,OAAO,CAAC;QACV,CAAC,CAAC;QACFU,OAAO,CAACE,MAAM,CAAC;MACjB,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ;EAEA,aAAaK,MAAMA,CAACC,IAAI,EAAE;IACxB,OAAO,IAAIT,OAAO,CAACC,OAAO,IAAI;MAC5BC,UAAU,CAAC,MAAM;QACf,MAAMQ,aAAa,GAAG;UACpB,GAAGD,IAAI;UACPrB,EAAE,EAAED,eAAe,CAACwB,MAAM,GAAG;QAC/B,CAAC;QACDxB,eAAe,CAACyB,IAAI,CAACF,aAAa,CAAC;QACnCT,OAAO,CAACS,aAAa,CAAC;MACxB,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ;EAEA,aAAaG,MAAMA,CAACzB,EAAE,EAAEqB,IAAI,EAAE;IAC5B,OAAO,IAAIT,OAAO,CAACC,OAAO,IAAI;MAC5BC,UAAU,CAAC,MAAM;QACf,MAAMY,KAAK,GAAG3B,eAAe,CAAC4B,SAAS,CAACC,CAAC,IAAIA,CAAC,CAAC5B,EAAE,KAAKA,EAAE,CAAC;QACzD,IAAI0B,KAAK,KAAK,CAAC,CAAC,EAAE;UAChB3B,eAAe,CAAC2B,KAAK,CAAC,GAAG;YAAE,GAAG3B,eAAe,CAAC2B,KAAK,CAAC;YAAE,GAAGL;UAAK,CAAC;UAC/DR,OAAO,CAACd,eAAe,CAAC2B,KAAK,CAAC,CAAC;QACjC,CAAC,MAAM;UACL,MAAM,IAAIG,KAAK,CAAC,sBAAsB,CAAC;QACzC;MACF,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ;AACF;AAEA,eAAepB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}