{"ast":null,"code":"const profiles = [{\n  id: 1,\n  name: '张三',\n  title: '高级前端工程师',\n  email: 'zhangsan@example.com',\n  phone: '138-0000-0000',\n  location: '北京',\n  bio: '5年前端开发经验，专注于React和Vue.js技术栈，熟悉现代前端工程化和性能优化。',\n  avatar_url: '',\n  linkedin: 'https://linkedin.com/in/zhangsan',\n  github: 'https://github.com/zhangsan',\n  website: 'https://zhangsan.dev',\n  created_date: '2024-01-01'\n}];\nclass Profile {\n  static async list(orderBy = '-created_date') {\n    // 模拟异步操作\n    return new Promise(resolve => {\n      setTimeout(() => {\n        // 简单排序实现\n        const sorted = [...profiles].sort((a, b) => {\n          if (orderBy === '-created_date') {\n            return new Date(b.created_date) - new Date(a.created_date);\n          }\n          return 0;\n        });\n        resolve(sorted);\n      }, 100);\n    });\n  }\n  static async create(data) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const newProfile = {\n          ...data,\n          id: profiles.length + 1,\n          created_date: new Date().toISOString().split('T')[0]\n        };\n        profiles.push(newProfile);\n        resolve(newProfile);\n      }, 100);\n    });\n  }\n  static async update(id, data) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const index = profiles.findIndex(p => p.id === id);\n        if (index !== -1) {\n          profiles[index] = {\n            ...profiles[index],\n            ...data\n          };\n          resolve(profiles[index]);\n        } else {\n          throw new Error('Profile not found');\n        }\n      }, 100);\n    });\n  }\n}\nexport default Profile;","map":{"version":3,"names":["profiles","id","name","title","email","phone","location","bio","avatar_url","linkedin","github","website","created_date","Profile","list","orderBy","Promise","resolve","setTimeout","sorted","sort","a","b","Date","create","data","newProfile","length","toISOString","split","push","update","index","findIndex","p","Error"],"sources":["/Users/lt/ai trae/person/src/entities/profile.js"],"sourcesContent":["const profiles = [\n  {\n    id: 1,\n    name: '张三',\n    title: '高级前端工程师',\n    email: 'zhangsan@example.com',\n    phone: '138-0000-0000',\n    location: '北京',\n    bio: '5年前端开发经验，专注于React和Vue.js技术栈，熟悉现代前端工程化和性能优化。',\n    avatar_url: '',\n    linkedin: 'https://linkedin.com/in/zhangsan',\n    github: 'https://github.com/zhangsan',\n    website: 'https://zhangsan.dev',\n    created_date: '2024-01-01'\n  }\n];\n\nclass Profile {\n  static async list(orderBy = '-created_date') {\n    // 模拟异步操作\n    return new Promise(resolve => {\n      setTimeout(() => {\n        // 简单排序实现\n        const sorted = [...profiles].sort((a, b) => {\n          if (orderBy === '-created_date') {\n            return new Date(b.created_date) - new Date(a.created_date);\n          }\n          return 0;\n        });\n        resolve(sorted);\n      }, 100);\n    });\n  }\n\n  static async create(data) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const newProfile = {\n          ...data,\n          id: profiles.length + 1,\n          created_date: new Date().toISOString().split('T')[0]\n        };\n        profiles.push(newProfile);\n        resolve(newProfile);\n      }, 100);\n    });\n  }\n\n  static async update(id, data) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const index = profiles.findIndex(p => p.id === id);\n        if (index !== -1) {\n          profiles[index] = { ...profiles[index], ...data };\n          resolve(profiles[index]);\n        } else {\n          throw new Error('Profile not found');\n        }\n      }, 100);\n    });\n  }\n}\n\nexport default Profile;"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,CACf;EACEC,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAE,SAAS;EAChBC,KAAK,EAAE,sBAAsB;EAC7BC,KAAK,EAAE,eAAe;EACtBC,QAAQ,EAAE,IAAI;EACdC,GAAG,EAAE,6CAA6C;EAClDC,UAAU,EAAE,EAAE;EACdC,QAAQ,EAAE,kCAAkC;EAC5CC,MAAM,EAAE,6BAA6B;EACrCC,OAAO,EAAE,sBAAsB;EAC/BC,YAAY,EAAE;AAChB,CAAC,CACF;AAED,MAAMC,OAAO,CAAC;EACZ,aAAaC,IAAIA,CAACC,OAAO,GAAG,eAAe,EAAE;IAC3C;IACA,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAI;MAC5BC,UAAU,CAAC,MAAM;QACf;QACA,MAAMC,MAAM,GAAG,CAAC,GAAGnB,QAAQ,CAAC,CAACoB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UAC1C,IAAIP,OAAO,KAAK,eAAe,EAAE;YAC/B,OAAO,IAAIQ,IAAI,CAACD,CAAC,CAACV,YAAY,CAAC,GAAG,IAAIW,IAAI,CAACF,CAAC,CAACT,YAAY,CAAC;UAC5D;UACA,OAAO,CAAC;QACV,CAAC,CAAC;QACFK,OAAO,CAACE,MAAM,CAAC;MACjB,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ;EAEA,aAAaK,MAAMA,CAACC,IAAI,EAAE;IACxB,OAAO,IAAIT,OAAO,CAACC,OAAO,IAAI;MAC5BC,UAAU,CAAC,MAAM;QACf,MAAMQ,UAAU,GAAG;UACjB,GAAGD,IAAI;UACPxB,EAAE,EAAED,QAAQ,CAAC2B,MAAM,GAAG,CAAC;UACvBf,YAAY,EAAE,IAAIW,IAAI,CAAC,CAAC,CAACK,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QACrD,CAAC;QACD7B,QAAQ,CAAC8B,IAAI,CAACJ,UAAU,CAAC;QACzBT,OAAO,CAACS,UAAU,CAAC;MACrB,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ;EAEA,aAAaK,MAAMA,CAAC9B,EAAE,EAAEwB,IAAI,EAAE;IAC5B,OAAO,IAAIT,OAAO,CAACC,OAAO,IAAI;MAC5BC,UAAU,CAAC,MAAM;QACf,MAAMc,KAAK,GAAGhC,QAAQ,CAACiC,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACjC,EAAE,KAAKA,EAAE,CAAC;QAClD,IAAI+B,KAAK,KAAK,CAAC,CAAC,EAAE;UAChBhC,QAAQ,CAACgC,KAAK,CAAC,GAAG;YAAE,GAAGhC,QAAQ,CAACgC,KAAK,CAAC;YAAE,GAAGP;UAAK,CAAC;UACjDR,OAAO,CAACjB,QAAQ,CAACgC,KAAK,CAAC,CAAC;QAC1B,CAAC,MAAM;UACL,MAAM,IAAIG,KAAK,CAAC,mBAAmB,CAAC;QACtC;MACF,CAAC,EAAE,GAAG,CAAC;IACT,CAAC,CAAC;EACJ;AACF;AAEA,eAAetB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}